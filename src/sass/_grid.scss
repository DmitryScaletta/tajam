// ============================================================
// options
// ============================================================

$grid-columns:           12   !default;
$grid-gutter-width-base: 30px !default;

$grid-breakpoints: (
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px,
) !default;

$container-max-widths: (
	sm: 540px,
	md: 720px,
	lg: 960px,
	xl: 1140px,
) !default;




// ============================================================
// common styles
// ============================================================

html {
	box-sizing: border-box;
}

*,
*:before,
*:after {
	box-sizing: inherit;
}

%clearfix {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}


// ============================================================
// grid-container, grid-container-fluid
// ============================================================
// @examples:
//   bootstrap: container
//   @include grid-container;
//   
//   bootstrap: container-fluid
//   @include grid-container-fluid;

%container-fixed {
	@extend %clearfix;
	margin-right: auto;
	margin-left:  auto;
	padding-left: floor($grid-gutter-width-base / 2);
	padding-right: ceil($grid-gutter-width-base / 2);
}

@each $breakpoint-name in map-keys($grid-breakpoints) {
	$breackpoint-min-width: map-get($grid-breakpoints,     $breakpoint-name);
	$container-max-width:   map-get($container-max-widths, $breakpoint-name);
	
	%container-media-#{$breakpoint-name} {
		@media (min-width: $breackpoint-min-width) {
			width: $container-max-width;
		}
	}
}

@mixin grid-container {
	@extend %container-fixed;
	max-width: 100%;

	@each $breakpoint-name in map-keys($grid-breakpoints) {
		@extend %container-media-#{$breakpoint-name};
	}
}

@mixin grid-container-fluid {
	@extend %container-fixed;
}



// ============================================================
// grid-row
// ============================================================
// @example:
//   bootstrap: row
//   @include grid-row;

@mixin grid-row {
	@extend %clearfix;

	margin-left:   ceil($grid-gutter-width-base / -2);
	margin-right: floor($grid-gutter-width-base / -2);
}



// ============================================================
// grid-column($sizes...)
// ============================================================
// examples:
//   bootstrap: col-6
//   @include grid-column(6);
//   
//   bootstrap: col-md-3
//   @include grid-column(md 3);
//   
//   bootstrap: col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2
//   @include grid-column(12, sm 6, md 4, lg 3, xl 2);

%grid-column-common {
	position: relative;
	min-height: 1px;
	padding-left:  $grid-gutter-width-base / 2;
	padding-right: $grid-gutter-width-base / 2;
}

@mixin grid-column($sizes...) {
	@extend %grid-column-common;
	
	@each $size in $sizes {
		@if length($size) == 1 {
			$columns: nth($size, 1);
			float: left;
			width: percentage($columns / $grid-columns);
		} @else {
			$breakpoint-name:      nth($size, 1);
			$breakpoint-min-width: map-get($grid-breakpoints, $breakpoint-name);
			$columns:              nth($size, 2);
			
			@media (min-width: $breakpoint-min-width) {
				float: left;
				width: percentage($columns / $grid-columns);
			}
		}
	}
}



// ============================================================
// grid-column-modifier($type, $sizes...)
// ============================================================
// $type: offset | pull | push
// examples:
//   bootstrap: offset-2 offset-md-0
//   @include grid-column-modifier(offset, 2, md 0);
//   
//   bootstrap: pull-md-2 pull-lg-0
//   @include grid-column-modifier(pull, md 2, lg 0);

@mixin _grid-column-modifier($type, $columns) {
	$modifier-value: percentage($columns / $grid-columns);

	@if $type == push {
		left:  if($columns > 0, $modifier-value, auto);
	} @else if $type == pull {
		right: if($columns > 0, $modifier-value, auto);
	} @else if $type == offset {
		margin-left: $modifier-value;
	}
}

@mixin grid-column-modifier($type, $sizes...) {
	@each $size in $sizes {
		@if length($size) == 1 {
			$columns: nth($size, 1);
			@include _grid-column-modifier($type, $columns);
		} @else {
			$breakpoint-name:      nth($size, 1);
			$breakpoint-min-width: map-get($grid-breakpoints, $breakpoint-name);
			$columns:              nth($size, 2);
			
			@media (min-width: $breakpoint-min-width) {
				@include _grid-column-modifier($type, $columns);
			}
		}
	}
}
